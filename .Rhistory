df = read_excel("./ExchangeUSD.xlsx")
View(df)
# Dropping unwanted columns
df = subset(df, select = -c(Wdy, `YYYY/MM/DD`))
df$Rate = df$`USD/EUR`
df_copy_ar2 = df
# Renaming the Columns of the Data-frame
df = setNames(df, c("Rate_Original", "Rate_AR1"))
View(df)
# Shifting the Rate_AR1 column rows by one down below
df['Rate_AR1'] <- c(NA, head(df['Rate_AR1'], dim(df)[1] - 1)[[1]])
# Removing the first row from the dataframe because there is a null value present in the Rate_AR1 column
df = drop_na(df)
# normalization
normalize = function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
# normalized data
df.normalized = data.frame(lapply(df, normalize))
View(df.normalized)
# Creating the index colummn for the dataset
df.normalized$Index = seq.int(nrow(df))
# Creating the Training Data
training_data = df.normalized[1:400,]
# Creating the Testing Data
testing_data = df.normalized[401:499,]
View(testing_data)
# Training a model on the data
set.seed(101)
# Training the model
model <- neuralnet(Rate_Original~Rate_AR1,
# hidden=c(6),
hidden=c(6,6),
data = training_data,
act.fct = "logistic",
linear.output = TRUE,
err.fct = "sse",
learningrate = 0.08)
testing_data_actual_rate = data.frame(testing_data$Rate_Original)
predict_result = predict(model, testing_data_actual_rate)
View(predict_result)
# Plotting the graph
plot(testing_data$Index,testing_data$Rate_Original,
main = "Actual VS Predicted", xlab = "Index",
ylab = "Rate", col = "black", type = "l")
lines(testing_data$Index, predict_result, col="red")
# Evaluating the model
actual = data.frame(testing_data$Rate_Original)
predicted = predict_result
# Calculating the Mean Absolute Error
mae = round(mae(actual$testing_data.Rate_Original, predicted) * 100, digits = 4)
print(paste("Mean Absolute Error: ", mae, " %", sep = ""))
# Calculating the Root Mean Squared Error
rmse = round(rmse(actual$testing_data.Rate_Original, predicted) * 100, digits = 4)
print(paste("Root Mean Squared Error: ", rmse, " %", sep = ""))
# Calculating the Mean Absolute Percentage Error Loss
mape = round(MAPE(actual$testing_data.Rate_Original, predicted) * 100, digits = 4)
print(paste("Mean Absolute Percentage Error Loss: ", mape, " %", sep = ""))
#---------------------------------------------------------------------------
# Checking with AR2
# Creating another copy for AR3
df_copy_ar3 = df_copy_ar2
View(df_copy_ar2)
# Renaming the Columns of the Data-frame
df_copy_ar2 = setNames(df_copy_ar2, c("Rate_Original", "Rate_AR2"))
# Shifting the Rate_AR1 column rows by one down below
for (index in 1:2) {
df_copy_ar2['Rate_AR2'] <- c(NA, head(df_copy_ar2['Rate_AR2'], dim(df_copy_ar2)[1] - 1)[[1]])
}
# Removing the first row from the dataframe because there is a null value present in the Rate_AR2 column
df_copy_ar2 = drop_na(df_copy_ar2)
View(df_copy_ar2)
df_copy_ar2.normalized = data.frame(lapply(df_copy_ar2, normalize))
View(df_copy_ar2.normalized)
df_copy_ar2.normalized = data.frame(lapply(df_copy_ar2, normalize))
View(df_copy_ar2.normalized)
# Creating the index colummn for the dataset
df_copy_ar2.normalized$Index = seq.int(nrow(df_copy_ar2))
# Creating the Training Data
training_data = df_copy_ar2.normalized[1:400,]
# Creating the Testing Data
testing_data = df_copy_ar2.normalized[401:499,]
View(testing_data)
df_copy_ar2.normalized = data.frame(lapply(df_copy_ar2, normalize))
View(df_copy_ar2.normalized)
# Creating the index colummn for the dataset
df_copy_ar2.normalized$Index = seq.int(nrow(df_copy_ar2))
# Creating the Training Data
training_data = df_copy_ar2.normalized[1:400,]
# Creating the Testing Data
testing_data = df_copy_ar2.normalized[401:498,]
View(testing_data)
testing_data_actual_rate = data.frame(testing_data$Rate_Original)
predict_result = predict(model, testing_data_actual_rate)
View(predict_result)
# Plotting the graph
plot(testing_data$Index,testing_data$Rate_Original,
main = "Actual VS Predicted", xlab = "Index",
ylab = "Rate", col = "black", type = "l")
lines(testing_data$Index, predict_result, col="red")
# Evaluating the model
actual = data.frame(testing_data$Rate_Original)
predicted = predict_result
# Calculating the Mean Absolute Error
mae = round(mae(actual$testing_data.Rate_Original, predicted) * 100, digits = 4)
print(paste("Mean Absolute Error: ", mae, " %", sep = ""))
# Calculating the Root Mean Squared Error
rmse = round(rmse(actual$testing_data.Rate_Original, predicted) * 100, digits = 4)
print(paste("Root Mean Squared Error: ", rmse, " %", sep = ""))
# Calculating the Mean Absolute Percentage Error Loss
mape = round(MAPE(actual$testing_data.Rate_Original, predicted) * 100, digits = 4)
print(paste("Mean Absolute Percentage Error Loss: ", mape, " %", sep = ""))
df = read_excel("./ExchangeUSD.xlsx")
View(df)
# Dropping unwanted columns
df = subset(df, select = -c(Wdy, `YYYY/MM/DD`))
df$Rate = df$`USD/EUR`
df_copy_ar2 = df
# Renaming the Columns of the Data-frame
df = setNames(df, c("Rate_Original", "Rate_AR1"))
View(df)
# Shifting the Rate_AR1 column rows by one down below
df['Rate_AR1'] <- c(NA, head(df['Rate_AR1'], dim(df)[1] - 1)[[1]])
# Removing the first row from the dataframe because there is a null value present in the Rate_AR1 column
df = drop_na(df)
# normalization
normalize = function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
# normalized data
df.normalized = data.frame(lapply(df, normalize))
View(df.normalized)
# Creating the index colummn for the dataset
df.normalized$Index = seq.int(nrow(df))
# Creating the Training Data
training_data = df.normalized[1:400,]
# Creating the Testing Data
testing_data = df.normalized[401:499,]
View(testing_data)
# Training a model on the data
set.seed(101)
# Training the model
model <- neuralnet(Rate_Original~Rate_AR1,
# hidden=c(6),
hidden=c(6,6),
data = training_data,
act.fct = "logistic",
linear.output = TRUE,
err.fct = "sse",
learningrate = 0.08)
# testing_data_actual_rate = data.frame(testing_data$Rate_Original)
predict_result = predict(model, df.normalized)
plot(testing_data$Index,df.normalized$Rate_Original,
main = "Actual VS Predicted", xlab = "Index",
ylab = "Rate", col = "black", type = "l")
lines(testing_data$Index, predict_result, col="red")
# Plotting the graph
plot(df.normalized$Index,df.normalized$Rate_Original,
main = "Actual VS Predicted", xlab = "Index",
ylab = "Rate", col = "black", type = "l")
lines(df.normalized$Index, predict_result, col="red")
plot(df.normalized$Index,df.normalized$Rate_Original,
main = "Actual VS Predicted (using AR1 order)", xlab = "Index",
ylab = "Rate", col = "black", type = "l")
lines(df.normalized$Index, predict_result, col="red")
legend(1, 95, legend=c("Actual", "Predicted"),
col=c("black", "red"), lty=1:2, cex=0.8)
legend(1, 95, legend=c("Actual", "Predicted"),
col=c("black", "red"))
legend(50, 95, legend=c("Actual", "Predicted"),
col=c("black", "red"))
plot(df.normalized$Index,df.normalized$Rate_Original,
main = "Actual VS Predicted (using AR1 order)", xlab = "Index",
ylab = "Rate", col = "black", type = "l")
lines(df.normalized$Index, predict_result, col="red")
legend(50, 95, legend=c("Actual", "Predicted"),
col=c("black", "red"))
plot(df.normalized$Index,df.normalized$Rate_Original,
main = "Actual VS Predicted (using AR1 order)", xlab = "Index",
ylab = "Rate", col = "black", type = "l")
lines(df.normalized$Index, predict_result, col="red")
legend(1, 95, legend=c("Line 1", "Line 2"),
col=c("red", "blue"), lty=1:2, cex=0.8)
plot(df.normalized$Index,df.normalized$Rate_Original,
main = "Actual VS Predicted (using AR1 order)", xlab = "Index",
ylab = "Rate", col = "black", type = "l",pch=19)
lines(df.normalized$Index, predict_result, col="red",pch=18)
legend(1, 95, legend=c("Line 1", "Line 2"),
col=c("red", "blue"), lty=1:2, cex=0.8)
library(graphics)
plot(df.normalized$Index,df.normalized$Rate_Original,
main = "Actual VS Predicted (using AR1 order)", xlab = "Index",
ylab = "Rate", col = "black", type = "l")
lines(df.normalized$Index, predict_result, col="red")
legend(1, 95, legend=c("Line 1", "Line 2"),
col=c("red", "blue"), lty=1:2, cex=0.8)
legend("bottomleft",
legend = c("Group 1", "Group 2"),
col = c(rgb(0.2,0.4,0.1,0.7),
rgb(0.8,0.4,0.1,0.7)),
pch = c(17,19),
bty = "n",
pt.cex = 2,
cex = 1.2,
text.col = "black",
horiz = F ,
inset = c(0.1, 0.1))
legend(x=1, y=95, legend=c("Line 1", "Line 2"),
col=c("red", "blue"), lty=1:2, cex=0.8)
# Plotting the graph
plot(df.normalized$Index,df.normalized$Rate_Original,
main = "Actual VS Predicted (using AR1 order)", xlab = "Index",
ylab = "Rate", col = "black", type = "l")
lines(df.normalized$Index, predict_result, col="red")
legend(x=1, y=95, legend=c("Line 1", "Line 2"),
col=c("red", "blue"), lty=1:2, cex=0.8)
plot(df.normalized$Index,df.normalized$Rate_Original,
main = "Actual VS Predicted (using AR1 order)", xlab = "Index",
ylab = "Rate", col = "black", type = "l")
lines(df.normalized$Index, predict_result, col="red")
legend('topright', names(a)[-1] ,
lty=1, col=c('red', 'blue', 'green',' brown'), bty='n', cex=.75)
plot(df.normalized$Index,df.normalized$Rate_Original,
main = "Actual VS Predicted (using AR1 order)", xlab = "Index",
ylab = "Rate", col = "black", type = "l")
lines(df.normalized$Index, predict_result, col="red")
legend('topright', names(a)[-1] ,
lty=1, col=c('red', 'blue', 'green',' brown'), bty='n', cex=.75)
plot(df.normalized$Index,df.normalized$Rate_Original,
main = "Actual VS Predicted (using AR1 order)", xlab = "Index",
ylab = "Rate", col = "black", type = "l")
lines(df.normalized$Index, predict_result, col="red")
legend("topleft",                    # Add legend to plot
legend = c("Group 1", "Group 2"),
col = 1:2,
pch = 16)
legend("topleft",                    # Add legend to plot
legend = c("Group 1", "Group 2"),
col = 1:2,
lty = 1)
legend("topleft",                    # Add legend to plot
legend = c("Actual", "Predicted"),
col = 1:2,
pch = 16,
horiz = TRUE)
plot(df.normalized$Index,df.normalized$Rate_Original,
main = "Actual VS Predicted (using AR1 order)", xlab = "Index",
ylab = "Rate", col = "black", type = "l")
lines(df.normalized$Index, predict_result, col="red")
legend("topleft",                    # Add legend to plot
legend = c("Actual", "Predicted"),
col = 1:2,
lty = 1,
horiz = TRUE)
legend("topleft",                    # Add legend to plot
legend = c("Actual", "Predicted"),
col = 1:2,
lty = 1,
cex = 3)
legend("topleft",                    # Add legend to plot
legend = c("Actual", "Predicted"),
col = 1:2,
lty = 1,
cex = -3)
plot(df.normalized$Index,df.normalized$Rate_Original,
main = "Actual VS Predicted (using AR1 order)", xlab = "Index",
ylab = "Rate", col = "black", type = "l")
lines(df.normalized$Index, predict_result, col="red")
legend("topleft",                    # Add legend to plot
legend = c("Actual", "Predicted"),
col = 1:2,
lty = 1,
cex = 1)
legend(x = - 2, y = 1,                    # Add legend to plot
legend = c("Actual", "Predicted"),
col = 1:2,
lty = 1,
pch = 16)
legend(x = - 2, y = 1,                    # Add legend to plot
legend = c("Actual", "Predicted"),
col = 1:2,
lty = 1)
plot(df.normalized$Index,df.normalized$Rate_Original,
main = "Actual VS Predicted (using AR1 order)", xlab = "Index",
ylab = "Rate", col = "black", type = "l")
lines(df.normalized$Index, predict_result, col="red")
legend("bottomright",                    # Add legend to plot
legend = c("Actual", "Predicted"),
col = 1:2,
lty = 1)
legend("bottomright",                    # Add legend to plot
legend = c("Actual", "Predicted"),
col = 1:2,
lty = 1,
cex = 0.75)
plot(df.normalized$Index,df.normalized$Rate_Original,
main = "Actual VS Predicted (using AR1 order)", xlab = "Index",
ylab = "Rate", col = "black", type = "l")
lines(df.normalized$Index, predict_result, col="red")
legend("bottomright",                    # Add legend to plot
legend = c("Actual", "Predicted"),
col = 1:2,
lty = 1,
cex = 0.25)
legend("bottomright",                    # Add legend to plot
legend = c("Actual", "Predicted"),
col = 1:2,
lty = 1,
cex = 0.50)
plot(df.normalized$Index,df.normalized$Rate_Original,
main = "Actual VS Predicted (using AR1 order)", xlab = "Index",
ylab = "Rate", col = "black", type = "l")
lines(df.normalized$Index, predict_result, col="red")
# op <- par(cex = 1.5)
legend("bottomright",                    # Add legend to plot
legend = c("Actual", "Predicted"),
col = 1:2,
lty = 1,
cex = 0.50,
pt.cex = 1)
plot(df.normalized$Index,df.normalized$Rate_Original,
main = "Actual VS Predicted (using AR1 order)", xlab = "Index",
ylab = "Rate", col = "black", type = "l")
lines(df.normalized$Index, predict_result, col="red")
op <- par(cex = 1.5)
legend("bottomright",                    # Add legend to plot
legend = c("Actual", "Predicted"),
col = 1:2,
lty = 1,
cex = 0.50)
plot(df.normalized$Index,df.normalized$Rate_Original,
main = "Actual VS Predicted (using AR1 order)", xlab = "Index",
ylab = "Rate", col = "black", type = "l")
lines(df.normalized$Index, predict_result, col="red")
op <- par(cex = 1.5)
legend("bottomright",                    # Add legend to plot
legend = c("Actual", "Predicted"),
col = 1:2,
xpd=TRUE,
lty = 1,
cex = 0.50)
plot(df.normalized$Index,df.normalized$Rate_Original,
main = "Actual VS Predicted (using AR1 order)", xlab = "Index",
ylab = "Rate", col = "black", type = "l")
lines(df.normalized$Index, predict_result, col="red")
legend("bottomright",                    # Add legend to plot
legend = c("Actual", "Predicted"),
col = 1:2,
lty = 1,
cex = 0.50)
plot(df.normalized$Index,df.normalized$Rate_Original,
main = "Actual VS Predicted (using AR1 order)", xlab = "Index",
ylab = "Rate", col = "black", type = "l")
lines(df.normalized$Index, predict_result, col="red")
legend(-0.2, 0.3,                    # Add legend to plot
legend = c("Actual", "Predicted"),
col = 1:2,
lty = 1,
cex = 0.50)
plot(df.normalized$Index,df.normalized$Rate_Original,
main = "Actual VS Predicted (using AR1 order)", xlab = "Index",
ylab = "Rate", col = "black", type = "l")
lines(df.normalized$Index, predict_result, col="red")
legend(-0.2, 0.3,                    # Add legend to plot
legend = c("Actual", "Predicted"),
col = 1:2,
lty = 1,xpd=TRUE,
cex = 0.50)
plot(df.normalized$Index,df.normalized$Rate_Original,
main = "Actual VS Predicted (using AR1 order)", xlab = "Index",
ylab = "Rate", col = "black", type = "l")
lines(df.normalized$Index, predict_result, col="red")
legend("topleft", c("group A", "group B"), pch=c(1,2), lty=c(1,2),
inset=c(1,0), xpd=TRUE, bty="n"
)
legend("topleft", c("group A", "group B"), pch=c(1,2), lty=1,
inset=c(1,0), xpd=TRUE, bty="n"
)
legend("topleft", c("group A", "group B"), pch=c(1,2), lty=1,
, xpd=TRUE, bty="n"
)
legend("topleft", c("group A", "group B"), pch=c(1,2), lty=1,
inset=c(1,0), xpd=TRUE, bty="n"
)
plot(df.normalized$Index,df.normalized$Rate_Original,
main = "Actual VS Predicted (using AR1 order)", xlab = "Index",
ylab = "Rate", col = "black", type = "l")
lines(df.normalized$Index, predict_result, col="red")
legend("topleft", legend = c("Actual", "Predicted"), pch=c(1,2), lty = 1,
inset=c(1,0), xpd=TRUE, bty="n"
)
legend("topleft", legend = c("Actual", "Predicted"), pch=c(1,2), lty = 1,
inset=c(1,0), xpd=TRUE
)
plot(df.normalized$Index,df.normalized$Rate_Original,
main = "Actual VS Predicted (using AR1 order)", xlab = "Index",
ylab = "Rate", col = "black", type = "l")
lines(df.normalized$Index, predict_result, col="red")
legend("center",                    # Add legend to plot
legend = c("Actual", "Predicted"),
col = 1:2,
lty = 1,
cex = 0.50)
legend("bottomleft",                    # Add legend to plot
legend = c("Actual", "Predicted"),
col = 1:2,
lty = 1,
cex = 0.50)
plot(df.normalized$Index,df.normalized$Rate_Original,
main = "Actual VS Predicted (using AR1 order)", xlab = "Index",
ylab = "Rate", col = "black", type = "l")
lines(df.normalized$Index, predict_result, col="red")
legend("bottomright",                    # Add legend to plot
legend = c("Actual", "Predicted"),
col = 1:2,
lty = 1,
cex = 0.50)
legend("bottomright",                    # Add legend to plot
legend = c("Actual", "Predicted"),
col = 1:3,
lty = 1,
cex = 0.50)
legend("bottomright",                    # Add legend to plot
legend = c("ACTUAL", "PREDICTED"),
col = 1:2,
lty = 1,
cex = 0.50)
actual = data.frame(df.normalized$Rate_Original)
predicted = predict_result
mae = round(mae(actual$df.normalized.Rate_Original, predicted) * 100, digits = 4)
print(paste("Mean Absolute Error: ", mae, " %", sep = ""))
# Calculating the Root Mean Squared Error
rmse = round(rmse(actual$df.normalized.Rate_Original, predicted) * 100, digits = 4)
print(paste("Root Mean Squared Error: ", rmse, " %", sep = ""))
# Calculating the Mean Absolute Percentage Error Loss
mape = round(MAPE(actual$df.normalized.Rate_Original, predicted) * 100, digits = 4)
print(paste("Mean Absolute Percentage Error Loss: ", mape, " %", sep = ""))
# Reading the data-set "vehicles.xlsx"
df = read_excel("./ExchangeUSD.xlsx")
View(df)
# Dropping unwanted columns
df = subset(df, select = -c(Wdy, `YYYY/MM/DD`))
df$Rate = df$`USD/EUR`
df_copy_ar2 = df
# Renaming the Columns of the Data-frame
df = setNames(df, c("Rate_Original", "Rate_AR1"))
View(df)
# Shifting the Rate_AR1 column rows by one down below
df['Rate_AR1'] <- c(NA, head(df['Rate_AR1'], dim(df)[1] - 1)[[1]])
# Removing the first row from the dataframe because there is a null value present in the Rate_AR1 column
df = drop_na(df)
# normalization
normalize = function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
# normalized data
df.normalized = data.frame(lapply(df, normalize))
View(df.normalized)
# Creating the index colummn for the dataset
df.normalized$Index = seq.int(nrow(df))
# Creating the Training Data
training_data = df.normalized[1:400,]
# Creating the Testing Data
testing_data = df.normalized[401:499,]
View(testing_data)
# Training a model on the data
set.seed(101)
# Training the model
model <- neuralnet(Rate_Original~Rate_AR1,
# hidden=c(6),
hidden=c(6,6),
data = training_data,
act.fct = "logistic",
linear.output = TRUE,
err.fct = "sse",
learningrate = 0.08)
testing_data_actual_rate = data.frame(testing_data$Rate_Original)
predict_result = predict(model, testing_data_actual_rate)
View(predict_result)
# Plotting the graph
plot(testing_data$Index,testing_data$Rate_Original,
main = "Actual VS Predicted (using AR1 order)", xlab = "Index",
ylab = "Rate", col = "black", type = "l")
lines(testing_data$Index, predict_result, col="red")
legend("bottomright",                    # Add legend to plot
legend = c("ACTUAL", "PREDICTED"),
col = 1:2,
lty = 1,
cex = 0.50)
actual = data.frame(testing_data$Rate_Original)
predicted = predict_result
# Evaluating the model
actual = data.frame(testing_data$Rate_Original)
predicted = predict_result
# Calculating the Mean Absolute Error
mae = round(mae(actual$testing_data.Rate_Original, predicted) * 100, digits = 4)
print(paste("Mean Absolute Error: ", mae, " %", sep = ""))
# Calculating the Root Mean Squared Error
rmse = round(rmse(actual$testing_data.Rate_Original, predicted) * 100, digits = 4)
print(paste("Root Mean Squared Error: ", rmse, " %", sep = ""))
# Calculating the Mean Absolute Percentage Error Loss
mape = round(MAPE(actual$testing_data.Rate_Original, predicted) * 100, digits = 4)
print(paste("Mean Absolute Percentage Error Loss: ", mape, " %", sep = ""))
plot(testing_data$Index,testing_data$Rate_Original,
main = "Actual VS Predicted (using AR1 on Testing Data)", xlab = "Index",
ylab = "Rate", col = "black", type = "l")
lines(testing_data$Index, predict_result, col="red")
legend("bottomright",                    # Add legend to plot
legend = c("ACTUAL", "PREDICTED"),
col = 1:2,
lty = 1,
cex = 0.50)
